
// Start of HEAD
#include <map>
#include <cmath>
#include <cstdio>
#include <vector>
#include <fstream>
#include <iostream>
#include <algorithm>
#ifdef __APPLE__
    #include <json/json.h>
#else
    #include <json/json.h>
#endif

using namespace std;
using namespace Json;

class TestStruct {
public:
    size_t testcase_id;
    string testcase_input_path;
    string testcase_output_path;
    string testcase_expected_output_path;
    vector<string> metadata_file_paths;
    string submission_code_path;
    bool testcase_result;
    size_t testcase_signal;
    float testcase_time;
    size_t testcase_memory;
    string data;
};

class ResultStruct {
public:
    bool   result;
    float  score;
    string message;
};
// End of HEAD
        

// Start of BODY
/**
 * TestStruct members::
 *  testcase_id                   [size_t] ID of the test-case
 *  testcase_input_path           [string] File path to test-case input
 *  testcase_output_path          [string] File path to test-case output generated by the problem solver
 *  testcase_expected_output_path [string] File path to test-case expected output to be matched with
 *  metadata_file_paths           [vector<string>] File paths to Question metadata (Extra files usually used for defining traning sets)
 *  submission_code_path          [string] File path to submission source code
 *  testcase_result               [bool] Set to true if test-case output matches test-case expected output. Matching is done line by line
 *  testcase_signal               [size_t] Exit code of the test-case process
 *  testcase_time                 [float] Time taken by the test-case process in seconds
 *  testcase_memory               [size_t] Peak memory of the test-case process determined in bytes
 *  data                          [string] <Future use>
 *
 *
 *  ResultStruct::
 *    result      [bool]  Assign test-case result. true determines success. false determines failure
 *    score       [float] Assign test-case score. Normalized between 0 to 1
 *    message     [string] Assign test-case message. This message is visible to the problem solver
**/

#include<unordered_set>

int n;

// Function to convert string to long long int. "123" -> 123.
long long int str_to_ll(string &str)
{
    long long int val = 0;
    int len = str.length();
    for (int i = 0; i < len; i++)
    {
        val = val * 10LL + (str[i] - '0');
    }
    return val;
}

/*
Function to generate all valid expressions that evaluates to the given target value.
all_expressions_container -> will contain answer.
cur_expr -> will contain the expression build till now. 
Suppose one of our final expression will look like "n1+n2*n3*n4+n5+n6*n7+n8", then we will build "cur_expr" like: 
    -> n1 (First time we will not add any operator with the number.)
    -> n1+n2 (Afterwards we will add one operator ('+' or '*') with number.)
    -> n1+n2*n3
    -> n1+n2*n3*n4
    -> n1+n2*n3*n4+n5
    -> n1+n2*n3*n4+n5+n6
    -> n1+n2*n3*n4+n5+n6*n7
    -> n1+n2*n3*n4+n5+n6*n7+n8
s -> given string.
target -> given target value.
pos -> in cur_expr we have already included digits from s[0, pos - 1] and s[pos, n - 1] is remaining to process.
cur_expr_val -> value of cur_expr. 
cur_expr_val_after_rightmost_addition_sign -> value of cur_expr after the rightmost addition sign '+'. 
Suppose cur_expr = 52 then cur_expr_val_after_rightmost_addition_sign = 52.
Suppose cur_expr = 52 + 47 then cur_expr_val_after_rightmost_addition_sign = 47.
Suppose cur_expr = 52 + 3 * 4 then cur_expr_val_after_rightmost_addition_sign = 12.
Suppose cur_expr = 52 + 3 * 4 * 2 then cur_expr_val_after_rightmost_addition_sign = 24.
Suppose cur_expr = 52 + 3 * 4 * 2 + 78 then cur_expr_val_after_rightmost_addition_sign = 78.
(Will be explained in detail, why it is needed, when it will be used in code, now don't worry about it.)
*/
void generate_all_expressions_util(vector<string> &all_expressions_container, string cur_expr, string s, long long int target, int pos, long long int cur_expr_val, long long int cur_expr_val_after_rightmost_addition_sign)
{
    // If processed the whole string.
    if (pos == n)
    {
        // Check if generated expression evaluates to the target value or not. 
        if (cur_expr_val == target)
        {
            // If generated expression evaluates to the target value then store it.
            all_expressions_container.push_back(cur_expr);
        }
        return;
    }
    /*
    As mentioned earliers we will build "cur_expr" in stages like:
        -> n1 (First time we will not add any operator with the number.)
        -> n1+n2 (Afterwards we will add one operator ('+' or '*') with number.)
        -> n1+n2*n3
        -> .....
    Now this loop will consider all possible s[pos, i] as a number and will add this number in cur_expr. 
    Note that when we consider s[pos, i] as a number, it means we are using join operation!
    (Basically we are trying all possibilities!) 
    */
    for (int i = pos; i < n; i++)
    {
        // Get the string s[pos, i] (both inclusive).
        string no_to_add_as_str = s.substr(pos, i - pos + 1);
        // Convert it to number.
        long long int no_to_add = str_to_ll(no_to_add_as_str);
        // If we have just started then first we will add number without operator. 
        if (pos == 0)
        {
            generate_all_expressions_util(all_expressions_container, no_to_add_as_str, s, target, i + 1, no_to_add, no_to_add);
        } 
        else
        {
            /*
            Add number with '+' operator before it. 
            For the next call variables will be:
            - cur_expr = cur_expr + '+' + no_to_add_as_str (As we are adding number with '+' operator befor it.)
            - pos = i + 1 (As we have included s[pos, i] also, now remaining string to add is s[i + 1, n - 1].)
            - cur_expr_val = cur_expr_val + no_to_add (As we have added number in the cur_expr with '+' operator, value of the cur_expr will be increased by number we are going to add.)
            - cur_expr_val_after_rightmost_addition_sign = no_to_add (As we have added number in the cur_expr with '+' operator, value of the expression after rightmost addition sign is the number itself.)
            */
            generate_all_expressions_util(all_expressions_container, cur_expr + '+' + no_to_add_as_str, s, target, i + 1, cur_expr_val + no_to_add, no_to_add);
            /*
            Add number with '*' operator before it. 
            For the next call variables will be:
            - cur_expr = cur_expr + '*' + no_to_add_as_str (As we are adding number with '*' operator befor it.)
            - pos = i + 1 (As we have included s[pos, i] also, now remaining string to add is s[i + 1, n - 1].)
            Now let's take one example before we mention other variables.
            Suppose we already have build cur_expr = "1 + 3" then cur_expr_val will be 4 and cur_expr_val_after_rightmost_addition_sign will be 3.
            Now if we want to add 4 with '*' operator then cur_expr will look like "1 + 3 * 4". 
            Now how can we find the value of "1 + 3 * 4" using the values for "1 + 3"?
            Observe that due to higher precedence of '*' over '+', 3 that we have added preciously as addition should be removed and it should be added as multiplication!
            So to find value of "1 + 3 * 4" from "1 + 3", first subtract the value of expression after the right most '+' sign and then add it with multiplication with new number we are going to add. So we have to do 4 - 3 + (3 * 4) = 13 and that will give the value of the expression.  
            Also expression value after right most '+' sign will be (3 * 4).
            - cur_expr_val = cur_expr_val - cur_expr_val_after_rightmost_addition_sign + (cur_expr_val_after_rightmost_addition_sign * no_to_add)
            - cur_expr_val_after_rightmost_addition_sign = cur_expr_val_after_rightmost_addition_sign * no_to_add
            */
            generate_all_expressions_util(all_expressions_container, cur_expr + '*' + no_to_add_as_str, s, target, i + 1, cur_expr_val - cur_expr_val_after_rightmost_addition_sign + (cur_expr_val_after_rightmost_addition_sign * no_to_add), cur_expr_val_after_rightmost_addition_sign * no_to_add);
        }
    }
}

vector<string> generate_all_expressions(string s, long long int target)
{
    // Store length of given string in global variable because we will be accessing it lots of time. 
    n = s.length();
    // This vector will store the answer.
    vector<string> all_expressions_container;
    generate_all_expressions_util(all_expressions_container, "", s, target, 0, 0LL, 0LL);
    return all_expressions_container;
}

unordered_set<string> our_expressions;

void run_custom_checker(const TestStruct t_obj,
                        ResultStruct &r_obj) {
    //Don't print anything to STDOUT in this function
    //Enter your custom checker scoring logic here
    
    r_obj.result = true;
    r_obj.score = 1.0f;
    r_obj.message = "Success";
    
    ifstream input_file;                                               // freopen is not working 
    input_file.open(t_obj.testcase_input_path.c_str()); 
    
    string s;
    input_file >> s;
    long long int target;
    input_file >> target;
    
    vector<string> all_expressions = generate_all_expressions(s, target);

    int our_len = all_expressions.size();
    for (int i = 0; i < our_len; i++)
    {
        our_expressions.insert(all_expressions[i]);
    } 
    
    ifstream output_file;                                               // freopen is not working 
    output_file.open(t_obj.testcase_output_path.c_str()); 
    
    string expr;
    while(output_file >> expr)
    {
        auto it = our_expressions.find(expr);
        if (it == our_expressions.end())
        {
            r_obj.result = false;
            r_obj.score = 0.0f;
            r_obj.message = "Wrong answer!";
            return;
        }
        our_expressions.erase(it);
    }
    // If there are some expressions that user did not generate then return wrong answer. 
    if (our_expressions.size())
    {
        r_obj.result = false;
        r_obj.score = 0.0f;
        r_obj.message = "Wrong answer!";
    }
}
// End of BODY
        

// Start of TAIL
int read_input_json(const string json_file_path,
                    TestStruct &t_obj) {
    ifstream stream(json_file_path);
    string json_file_contents((std::istreambuf_iterator<char>(stream)),
                 std::istreambuf_iterator<char>());

    Value root;
    Reader reader;
    if(!reader.parse(json_file_contents, root, false))
        return 1;

    try {
        // Read values
        if(root.isMember("testcase_id"))
            t_obj.testcase_id = root["testcase_id"].asInt();
        if(root.isMember("input_file_path"))
            t_obj.testcase_input_path = root["input_file_path"].asString();
        if(root.isMember("output_file_path"))
            t_obj.testcase_output_path = root["output_file_path"].asString();
        if(root.isMember("expected_output_file_path"))
            t_obj.testcase_expected_output_path = root["expected_output_file_path"].asString();
        if(root.isMember("metadata_file_paths")) {
            Value metadata_file_path_node = root["metadata_file_paths"];
            if(metadata_file_path_node.isArray()) {
                for(int i = 0; i < (int)metadata_file_path_node.size(); i++) {
                    string metadata_file = metadata_file_path_node[i].asString();
                    t_obj.metadata_file_paths.push_back(metadata_file);
                }
            }
        }
        if(root.isMember("submission_code_path"))
            t_obj.submission_code_path = root["submission_code_path"].asString();
        if(root.isMember("testcase_result"))
            t_obj.testcase_result = root["testcase_result"].asBool();
        if(root.isMember("testcase_signal"))
            t_obj.testcase_signal = root["testcase_signal"].asInt();
        if(root.isMember("testcase_time"))
            t_obj.testcase_time = root["testcase_time"].asFloat();
        if(root.isMember("testcase_memory"))
            t_obj.testcase_memory = root["testcase_memory"].asInt();
        if(root.isMember("data"))
            t_obj.data = root["data"].asString();
    }
    catch(const runtime_error& error) {
        return 1;
    }

    return 0;
}

void write_result_json(const ResultStruct r_obj) {
    Value root;
    root["custom_result"] = (int)r_obj.result;
    root["custom_score"] = max( ((r_obj.score > 1.0f)? 1.0f : r_obj.score), 0.0f);
    root["custom_message"] = (r_obj.message.size() > 4096)? r_obj.message.substr(0, 4095) : r_obj.message;
    cout << root.toStyledString() << endl;
}

int main(int argc, char** argv) {
    // Input parameters
    TestStruct t_obj;
    t_obj.testcase_id = 0;
    t_obj.testcase_signal = 0;
    t_obj.testcase_memory = 0;
    t_obj.testcase_time = 0.0f;
    t_obj.testcase_result = true;

    // Out parameters
    ResultStruct r_obj;
    r_obj.result = false;
    r_obj.score = 0.0f;
    r_obj.message = "Uninitialized";

    if(argc < 2) {
        write_result_json(r_obj);
        return 1;
    }

    // Decode input JSON
    int failure = read_input_json((string)argv[1],
                                    t_obj);
    // Incase input JSON was malformed or not existent
    if(failure) {
        r_obj.message = "Unable to read input json";
        write_result_json(r_obj);
        return 2;
    }

    // Run the custom checker evaluator
    run_custom_checker(t_obj, r_obj);

    // Encode result JSON
    write_result_json(r_obj);
    return 0;
}
// End of TAIL
