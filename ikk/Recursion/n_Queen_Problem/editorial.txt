

We have provided 3 solutions for the problem (other_solution.cpp, optimal_solution.cpp and optimal_solution2.cpp), all of them uses backtracking.

optimal_solution.cpp is an improvement over other_solution.cpp.







Queen can move horizontally, vertically, or diagonally.

No two queens to attack each other, we need to satisfy the following conditions:

1) There must be only one queen in one row.
2) There must be only one queen in one column.
3) There must be only one queen in diagonal from top-left to bottom-right (that is like \ , so we will call it back-slash diagonal.)
4) There must be only one queen in diagonal from top-right to bottom-left (that is like / , so we will call it slash diagonal.)

We can start placing queens row wise, from top row to bottom row. Once we have placed any queen in any row we will move to next next row. (So this will ensure that condition 1 is satisfied!) Now for condition 2, 3 and 4 we can perform a check before placing queen at any position.

This was very basic overview. Once look at the other_solution.cpp and it will be more clear.

In other_solution.cpp, is_safe function will visit one slash diagonal, one back-slash diagonal and one column, to check if there is any clash. So this function is O(n). But it can be easily reduced to O(1). Let's see how.


Lets take n = 5,

so matrix 5 * 5, with positions will look like:

00 01 02 03 04
10 11 12 13 14
20 21 22 23 24
30 31 32 33 34
40 41 42 43 44

1) identify column of element matrix[row][col] as:

0 1 2 3 4
0 1 2 3 4
0 1 2 3 4
0 1 2 3 4
0 1 2 3 4

that is column id = "col".

2) identify slash diagonal of element matrix[row][col] as:

0 1 2 3 4
1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
4 5 6 7 8

that is slash diagonal id = "row + col".

3) identify back-slash diagonal of element matrix[row][col] as:

4 3 2 1 0
5 4 3 2 1
6 5 4 3 2
7 6 5 4 3
8 7 6 5 4

that is back-slash diagonal id = "row - col + n - 1".






Number of columns are n (from 0 to n - 1).
Number of slash and back-slash diagonals are 2*n - 1 (from 0 to 2*n - 2).

Now we can take 3 boolean vectors, one for columns, one for slash diagonals and one for back-slash diagonals.
When we put any queen we can mark appropriate column, slash diagonal and back-slash diagonal as occupied.
Now in is_safe function instead of looping, we only need to check if any of the column, slash diagonal or back-slash diagonal is used or not.

Have a look at the optimal_solution.cpp and it will be more clear.







Now let's discuss optimal_solution2.cpp.

We know that in one row we will have only one queen (and total n queens), so instead of 2-D grid we can store the information of queens' position in 1D array.

Grid:

--q-
q---
---q
-q--

has queens at positions,
row -> col

0 -> 2,
1 -> 0,
2 -> 3,
3 -> 1

In a 1D array it can be represented as:

arrangement[0] = 2,
arrangement[1] = 0,
arrangement[2] = 3,
arrangement[3] = 1

So we have the same information now stored in 1D array (space O(n)) instead of 2D array (space O(n^2)).

In this problem, we are asked to return actual grids as answer. So, in this solution what we are doing is that first generate all arrangements in 1D and then generate 2D arrangements from 1D arrangements. But in optimal_solution.cpp, we are directly generating it. So when we are asked to return the actual grids, this solution is not the best. optimal_solution.cpp is better.

But think about the similar question where we are asked to return positions of the n queens as answer (not the actual grids). Here optimal_solution2.cpp will be better than both other_solution.cpp and optimal_solution.cpp! Because other_solution.cpp and optimal_solution.cpp will first generate 2D grids and then convert to positions, but optimal_solution2.cpp will directly find positions, avoiding 2d grids (of O(n^2) space)!








For all three solutions:

Time Complexity is exponential. (Exact bound is complex to derive and explain.)

Auxiliary Space Used is also exponential, as we are storing the valid solutions. (Exact bound is complex to derive and explain.)

Space Complexity is also exponential, as auxiliary space used is also exponential. (Exact bound is complex to derive and explain.)






(If you are looking at other solutions online and wondering why they are faster, then pay attention that they are printing only ONE VALID arrangement, not all possible arrangements!)





