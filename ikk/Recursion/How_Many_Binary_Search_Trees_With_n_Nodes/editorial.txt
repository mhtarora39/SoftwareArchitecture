

If getting wrong answer then first question to ask, are you using appropriate data type to avoid overflow? (For the given constraints int will overflow.)

If getting terminated due to timeout then it is time to learn about "Memorization Technique" with recursion. (Adding few lines of code will speed-up a lot!)






We have provided 4 solutions:

1) Catalan Number Solution: catalan_number_solution.cpp (If you will simply provide this solution in interview, without explaining the intuition,
	then it will not be accepted. Solution using recursion with memorization, is preferable.)
2) Recursive Solution : brute_force_solution.cpp
3) Recursive Solution With Memorization : other_solution.cpp
4) Iterative Solution : optimal_solution.cpp


First look at the Recursive Solution then Recursive Solution With Memorization and then Iterative Solution.

We expect you to implement recursive solution with memorization at least once. 


For Recursive Solution (brute_force_solution.cpp):

Time Complexity: 

O(Catalan number(n)).

This is a loose bound, tight bound is very complex to derive and explain.


Auxiliary Space Used: 

O(n).

Due to spaced used by function call stack, during recursive function calls. 


Space Complexity: 

O(n).

As auxiliary space used is O(n) and input is O(1), giving O(n) + O(1) -> O(n).







In recursive function you will note that function how_many_BSTs is called to calculate same values too many times! 

So this recalculation can be avoided by using memorization techniques. (We can use an array to store the result once it is calculated and afterwards reuse it!)

In Recursive Solution With Memorization, a few lines of code addition will improve time complexity from O(Catalan number(n))) to O(n ^ 2) and that is too big difference!

For n = 35, catalan number(35) = 3116285494907301262, while 35^2 = 1225. Now you see the difference of memorization!! 

Once you use memorization in your recursive implementation, time complexity, auxiliary space used and space complexity of Iterative Solution and Recursive Solution With Memorization will become same.


Time Complexity:

O(n ^ 2).


Auxiliary Space Used:

O(n).

As we are using array to store the calculated results. 


Space Complexity:

O(n).

As auxiliary space used is O(n) and input is O(1), giving O(n) + O(1) -> O(n).







 





