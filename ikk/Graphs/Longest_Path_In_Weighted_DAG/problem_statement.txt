
Longest Path In Weighted DAG

Problem Statement:

Given a weighted DAG (directed acyclic graph), where weight of an edge denotes the length of that edge.

Nodes in the graph are numbered from 1 to dag_nodes, where dag_nodes denotes the total number of nodes in the graph.

Also, you are given a node from_node and a node to_node. You have to find longest path from from_node to to_node in the given graph. 

Input Format:

There are six arguments.

First one is an integer dag_nodes, second one is an array dag_from, third one is an array dag_to and forth one is an array dag_weight. These four arguments cumulatively describes the weighted DAG. dag_nodes describes the total number of nodes in the given graph and there is an edge from dag_from[i] node to dag_to[i] node with length dag_weight[i].

Fifth argument is from_node and sixth argument is to_node.  

Output Format:

Return an array describing longest path from from_node to to_node.

There can be multiple longest paths, so you are free to return any of them. 

Constraints:

Given graph is a valid weighted DAG.
Given graph does not contain multiple edges. 
to_node is reachable from from_node.
1 <= dag_nodes <= 450
1 <= dag_from[i], dag_to[i], from_node, to_node <= dag_nodes
1 <= dag_weight[i] <= 2 * 10^9
Total number of edges in graph <= (dag_nodes * (dag_nodes - 1)) / 2

Sample Test Case:

Sample Input:

dag_nodes = 4
dag_from = [1 1 1 3]
dag_to = [2 3 4 4]
dag_weight =  [2 2 4 3]
from_node = 1
to_node = 4

Sample Output:

[1 3 4]

Explanation:

Total there are two paths from node 1 to node 4.
1) 1 -> 4 with length 4.
2) 1 -> 3 -> 4 with length 2 + 3 = 5.
So, Longest path from node 1 to node 4 is [1 3 4] with length 5.

Notes:

Maximum time allowed in interview: 20 Minutes.

When from_node = to_node, path contains only one node, so output should be [from_node] containing only one node. 

It can be helpful to first store edges node wise and then use it.
Something like this:

vector<vector<pair<int, int>>> node_wise_edges(dag_nodes + 1, vector<pair<int, int>>(0));
for (int i = 0; i < dag_edges; i++)
{
    node_wise_edges[dag_from[i]].push_back({dag_to[i], dag_weight[i]});
}

Now we have all the outgoing edges from node i in vector node_wise_edges[i]. And it will be easier to use. 


